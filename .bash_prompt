#!/bin/bash

none=false
date=false
seconds=true
simple=false

if [ "$date" = true ]; then
    timestampDate='[\D{%d/%m/%Y} '
else
    timestampDate='['
fi

if [ "$seconds" = true ]; then
    timestampTime='\D{%H:%M:%S}]'
else
    timestampTime='\D{%H:%M}]'
fi

if [ "$simple" = true ]; then
    PS1='\[\033[1;31m\]\u\[\033[1;0m\]:\[\033[01;36m\]\w \[\033[1;37m\]\$\[\033[0;0m\] '
else
    if [ "$none" = true ]; then
    	PS1='\[\033[1;31m\]\u\[\033[1;0m\]@\[\033[1;35m\]\h\[\033[1;0m\]:\[\033[01;36m\]\w \[\033[1;37m\]\$\[\033[0;0m\] '
    else
    	PS1='\[\033[1;33m\]'$timestampDate$timestampTime' \[\033[1;31m\]\u\[\033[1;0m\]@\[\033[1;35m\]\h\[\033[1;0m\]:\[\033[01;36m\]\w \[\033[1;37m\]\$\[\033[0;0m\] '
    fi
fi

if [ -z "$1" ]; then
	return
fi

function help_caller() {
	echo -e '\033[0;31m-r\033[0m | \033[0;31m--reset\033[0m          => [DEFAULT] use to reset the timestamp to default [HH:MM] (overrides -d, -s, -S)'
	echo -e '\033[0;31m-n\033[0m | \033[0;31m--none\033[0m           => use to toggle the timestamp (overrides all the other options)'
	echo -e '\033[0;31m-d\033[0m | \033[0;31m--date\033[0m           => use to toggle full date in the timestamp[dd:mm:yyyy]'
	echo -e '\033[0;31m-s\033[0m | \033[0;31m--seconds\033[0m        => use to toggle seconds in the timestamp [HH:MM:SS]'
    echo -e '\033[0;31m-S\033[0m | \033[0;31m--simple\033[0m         => use to toggle simplest prompt (overrides -d, -s)'
	echo -e '\033[0;31m-h\033[0m | \033[0;31m--help\033[0m           => show this help page'
	echo -e '\033[0;31m-e\033[0m | \033[0;31m--edit\033[0m           => edit ~/.bash_prompt'
}

OPTION_NONE=
OPTION_DEFAULT=
OPTION_SIMPLE=
OPTION_DATE=
OPTION_TIME=

while [ "$#" -gt 0 ]; do
	case "$1" in
		-h|--help) help_caller; return;;

		-n|--none) 
			# echo 'Remove bash prompt timestamp'
			OPTION_NONE=true
			shift 1;;
		-r|--reset) 
			# echo 'Reset bash prompt timestamp'
			OPTION_DEFAULT=true
			shift 1;;
		-d|--date)
			# echo 'Add date to bash prompt timestamp'
			OPTION_DATE=true
			shift 1;;
		-s|--seconds)
			# echo 'Add seconds to bash prompt timestamp'
			OPTION_TIME=true
			shift 1;;
        -S|--simple)
            OPTION_SIMPLE=true
            shift 1;;

		-e|--edit)
			vim ~/.bash_prompt
			return;;

		-*) echo "unknown option: $1" >&2; return;;
		*) echo "unknown option: $1" >&2; return;;
	esac
done

if [ "$OPTION_NONE" = true ];then
    if [ $(grep "^none=true$" -c ~/.bash_prompt) -eq 0 ]; then
		sed -i "s/^none=false$/none=true/" ~/.bash_prompt
	else
		sed -i "s/^none=true$/none=false/" ~/.bash_prompt
	fi
	prompt
	return
fi

if [ "$OPTION_DEFAULT" = true ];then
	sed -i "s/^none=true$/none=false/" ~/.bash_prompt
	sed -i "s/^date=true$/date=false/" ~/.bash_prompt
	sed -i "s/^seconds=true$/seconds=false/" ~/.bash_prompt
	sed -i "s/^simple=true$/simple=false/" ~/.bash_prompt
	prompt
	return
fi

if [ "$OPTION_SIMPLE" = true ]; then
    if [ $(grep "^simple=true$" -c ~/.bash_prompt) -eq 0 ]; then
        sed -i "s/^simple=false$/simple=true/" ~/.bash_prompt
    else
        sed -i "s/^simple=true$/simple=false/" ~/.bash_prompt
    fi
    prompt
    return
fi

if [ "$OPTION_DATE" = true ]; then
    if [ $(grep "^simple=true$" -c ~/.bash_prompt) -eq 0 ]; then
        if [ $(grep "^date=true$" -c ~/.bash_prompt) -eq 0 ]; then
    		sed -i "s/^date=false$/date=true/" ~/.bash_prompt
    	else
    		sed -i "s/^date=true$/date=false/" ~/.bash_prompt
        fi
    fi
fi

if [ "$OPTION_TIME" = true ]; then
    if [ $(grep "^simple=true$" -c ~/.bash_prompt) -eq 0 ]; then
        if [ $(grep "^seconds=true$" -c ~/.bash_prompt) -eq 0 ]; then
		    sed -i "s/^seconds=false$/seconds=true/" ~/.bash_prompt
	    else
		    sed -i "s/^seconds=true$/seconds=false/" ~/.bash_prompt
	    fi
	fi
fi
prompt
